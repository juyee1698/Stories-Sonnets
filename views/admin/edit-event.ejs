<%- include('../includes/head.ejs') %>
<link href="/css/typeahead.css"  rel="stylesheet" />
<link href="/css/bootstrap-tagsinput.css" rel="stylesheet">
<link href="/css/autocomplete.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/product.css">
    <link rel="stylesheet" href="/css/forms.css">
</head>
<body>
    <%- include('../includes/navigation.ejs') %>
    <div style="margin-top:100px"></div>
    
    <div class="container" style="margin-bottom: 5rem;">
    <div class="col-lg-2 col-md-2"></div>
    <div class="col-lg-8 col-md-8">
        <h3 class="mb-30 title_color"><% if(editing) { %>Edit Event<% } else { %>Create Event<% } %></h3>
        <form action="/admin/<% if(editing) { %>edit-event<% } else { %>add-event<% } %>" method="POST" id="add-form" enctype="multipart/form-data">
            <div class="mt-10">
                <label for="title">Title</label>
                <input type="text" name="title" placeholder="Title" id="title" value="<% if(editing || hasError) { %><%= event.title %><% } %>" class="single-input <%= validationErrors.find(e => e.param === 'title') ? 'invalid' : '' %>">
            </div>
            <div class="mt-10">
                <label for="image">Image URL</label>
                <input type="file" name="image" id="image" class="single-input">
                 
            </div>
            <div class="mt-10 autocomplete">
                <label for="location">Location</label>
                <input type="text" name="location" id="myInput" class="single-input" value="<% if(editing || hasError) { %><%= event.location %><% } %>" class="single-input <%= validationErrors.find(e => e.param === 'location') ? 'invalid' : '' %>">  
            </div>
            <div class="mt-10">
                <label for="link">Event Link</label>
                <input type="text" name="link" placeholder="Enter link to meet,skype or youtube" id="link" value="<% if(editing || hasError) { %><%= event.link %><% } %>" class="single-input <%= validationErrors.find(e => e.param === 'link') ? 'invalid' : '' %>">
            </div>

            <div class="mt-10">
                <label for="date">Event Date</label>
                <input type="date" name="date" placeholder="Enter date " id="date" value="<% if(editing || hasError) { %><%= event.date %><% } %>" class="single-input">
            </div>
            <div class="mt-10">
                <label for="starttime">Event Start Time</label>
                <input type="time" name="starttime" placeholder="Enter time duration" id="start-time" value="<% if(editing || hasError) { %><%= event.startTime %><% } %>" class="single-input">
            </div>
            <div class="mt-10">
                <label for="endtime">Event End Time</label>
                <input type="time" name="endtime" placeholder="Enter time duration" id="end-time" value="<% if(editing || hasError) { %><%= event.endTime %><% } %>" class="single-input">
            </div>
            <br>
            <div class="mt-10">
                <label for="speakers" style="font-size: medium;">Other Speakers (Max 3)</label>
            </div>
            
               
            <div class="mt-10">
                <label for="name1">Speaker 1 Name</label>
                <input type="text" name="name1" placeholder="Name" id="name1" value="<% if(editing || hasError) { %><%= event.speakerName1 %><% } %>" class="single-input <%= validationErrors.find(e => e.param === 'speakerName1') ? 'invalid' : '' %>">
            </div>
                
            <div class="mt-10">
                <label for="name2">Speaker 2 Name</label>
                <input type="text" name="name2" placeholder="Name" id="name2" value="<% if(editing || hasError) { %><%= event.speakerName2 %><% } %>" class="single-input <%= validationErrors.find(e => e.param === 'speakerName2') ? 'invalid' : '' %>">
            </div>
                
           
            <div class="mt-10">
                <label for="name3">Speaker 3 Name</label>
                <input type="text" name="name3" placeholder="Name" id="name3" value="<% if(editing || hasError) { %><%= event.speakerName3 %><% } %>" class="single-input <%= validationErrors.find(e => e.param === 'speakerName3') ? 'invalid' : '' %>">
            </div>
                
                
            
            <div class="mt-10">
                <label for="description">Description</label>
                <textarea class="single-textarea <%= validationErrors.find(e => e.param === 'description') ? 'invalid' : '' %>" name="description" id="description" rows="1">
                    <% if(editing || hasError) { %><%= event.description %><% } %>
                </textarea>
            </div>
            
            <br>
            <% if(editing) { %>
                <input type="hidden" value="<%= event._id %>" name="eventId">
            <% } %>
            <input type="hidden" name="_csrf" value="<%= csrfToken %>">
            <button class="btn" type="submit"><% if(editing) { %>Update Event<% } else { %>Add Event<% } %></button>
           
        </form>
        <% if(errorMessage) { %>
            <br><br>
            <div class="user-message user-message--error"><%= errorMessage %></div>
        <% } %>
    </div>
    <div class="col-lg-2 col-md-2"></div>
</div>

<script>
    function autocomplete(inp, arr) {
      /*the autocomplete function takes two arguments,
      the text field element and an array of possible autocompleted values:*/
      var currentFocus;
      /*execute a function when someone writes in the text field:*/
      inp.addEventListener("input", function(e) {
          var a, b, i, val = this.value;
          /*close any already open lists of autocompleted values*/
          closeAllLists();
          if (!val) { return false;}
          currentFocus = -1;
          /*create a DIV element that will contain the items (values):*/
          a = document.createElement("DIV");
          a.setAttribute("id", this.id + "autocomplete-list");
          a.setAttribute("class", "autocomplete-items");
          /*append the DIV element as a child of the autocomplete container:*/
          this.parentNode.appendChild(a);
          /*for each item in the array...*/
          for (i = 0; i < arr.length; i++) {
            /*check if the item starts with the same letters as the text field value:*/
            if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
              /*create a DIV element for each matching element:*/
              b = document.createElement("DIV");
              /*make the matching letters bold:*/
              b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
              b.innerHTML += arr[i].substr(val.length);
              /*insert a input field that will hold the current array item's value:*/
              b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
              /*execute a function when someone clicks on the item value (DIV element):*/
              b.addEventListener("click", function(e) {
                  /*insert the value for the autocomplete text field:*/
                  inp.value = this.getElementsByTagName("input")[0].value;
                  /*close the list of autocompleted values,
                  (or any other open lists of autocompleted values:*/
                  closeAllLists();
              });
              a.appendChild(b);
            }
          }
      });
      /*execute a function presses a key on the keyboard:*/
      inp.addEventListener("keydown", function(e) {
          var x = document.getElementById(this.id + "autocomplete-list");
          if (x) x = x.getElementsByTagName("div");
          if (e.keyCode == 40) {
            /*If the arrow DOWN key is pressed,
            increase the currentFocus variable:*/
            currentFocus++;
            /*and and make the current item more visible:*/
            addActive(x);
          } else if (e.keyCode == 38) { //up
            /*If the arrow UP key is pressed,
            decrease the currentFocus variable:*/
            currentFocus--;
            /*and and make the current item more visible:*/
            addActive(x);
          } else if (e.keyCode == 13) {
            /*If the ENTER key is pressed, prevent the form from being submitted,*/
            e.preventDefault();
            if (currentFocus > -1) {
              /*and simulate a click on the "active" item:*/
              if (x) x[currentFocus].click();
            }
          }
      });
      function addActive(x) {
        /*a function to classify an item as "active":*/
        if (!x) return false;
        /*start by removing the "active" class on all items:*/
        removeActive(x);
        if (currentFocus >= x.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = (x.length - 1);
        /*add class "autocomplete-active":*/
        x[currentFocus].classList.add("autocomplete-active");
      }
      function removeActive(x) {
        /*a function to remove the "active" class from all autocomplete items:*/
        for (var i = 0; i < x.length; i++) {
          x[i].classList.remove("autocomplete-active");
        }
      }
      function closeAllLists(elmnt) {
        /*close all autocomplete lists in the document,
        except the one passed as an argument:*/
        var x = document.getElementsByClassName("autocomplete-items");
        for (var i = 0; i < x.length; i++) {
          if (elmnt != x[i] && elmnt != inp) {
            x[i].parentNode.removeChild(x[i]);
          }
        }
      }
      /*execute a function when someone clicks in the document:*/
      document.addEventListener("click", function (e) {
          closeAllLists(e.target);
      });
    }
    
/*An array containing all the country names in the world:*/
var countries = ["Global","Afghanistan","Albania","Algeria","Andorra","Angola","Anguilla","Antigua & Barbuda","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia","Bosnia & Herzegovina","Botswana","Brazil","British Virgin Islands","Brunei","Bulgaria","Burkina Faso","Burundi","Cambodia","Cameroon","Canada","Cape Verde","Cayman Islands","Central Arfrican Republic","Chad","Chile","China","Colombia","Congo","Cook Islands","Costa Rica","Cote D Ivoire","Croatia","Cuba","Curacao","Cyprus","Czech Republic","Denmark","Djibouti","Dominica","Dominican Republic","Ecuador","Egypt","El Salvador","Equatorial Guinea","Eritrea","Estonia","Ethiopia","Falkland Islands","Faroe Islands","Fiji","Finland","France","French Polynesia","French West Indies","Gabon","Gambia","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guam","Guatemala","Guernsey","Guinea","Guinea Bissau","Guyana","Haiti","Honduras","Hong Kong","Hungary","Iceland","India","Indonesia","Iran","Iraq","Ireland","Isle of Man","Israel","Italy","Jamaica","Japan","Jersey","Jordan","Kazakhstan","Kenya","Kiribati","Kosovo","Kuwait","Kyrgyzstan","Laos","Latvia","Lebanon","Lesotho","Liberia","Libya","Liechtenstein","Lithuania","Luxembourg","Macau","Macedonia","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","Marshall Islands","Mauritania","Mauritius","Mexico","Micronesia","Moldova","Monaco","Mongolia","Montenegro","Montserrat","Morocco","Mozambique","Myanmar","Namibia","Nauro","Nepal","Netherlands","Netherlands Antilles","New Caledonia","New Zealand","Nicaragua","Niger","Nigeria","North Korea","Norway","Oman","Pakistan","Palau","Palestine","Panama","Papua New Guinea","Paraguay","Peru","Philippines","Poland","Portugal","Puerto Rico","Qatar","Reunion","Romania","Russia","Rwanda","Saint Pierre & Miquelon","Samoa","San Marino","Sao Tome and Principe","Saudi Arabia","Senegal","Serbia","Seychelles","Sierra Leone","Singapore","Slovakia","Slovenia","Solomon Islands","Somalia","South Africa","South Korea","South Sudan","Spain","Sri Lanka","St Kitts & Nevis","St Lucia","St Vincent","Sudan","Suriname","Swaziland","Sweden","Switzerland","Syria","Taiwan","Tajikistan","Tanzania","Thailand","Timor L'Este","Togo","Tonga","Trinidad & Tobago","Tunisia","Turkey","Turkmenistan","Turks & Caicos","Tuvalu","Uganda","Ukraine","United Arab Emirates","United Kingdom","United States of America","Uruguay","Uzbekistan","Vanuatu","Vatican City","Venezuela","Vietnam","Virgin Islands (US)","Yemen","Zambia","Zimbabwe"];
    
/*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
autocomplete(document.getElementById("myInput"), countries);
</script>



<%- include('../includes/end.ejs') %>